{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport Flashcard from \"./flashcard.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SLIDER_WIDTH = Dimensions.get('window').width + 80;\nvar ITEM_WIDTH = Math.round(SLIDER_WIDTH * 0.7);\nvar CarouselCards = function CarouselCards(vieweddecks) {\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    index = _React$useState2[0],\n    setIndex = _React$useState2[1];\n  var isCarousel = React.useRef(null);\n  return _jsxs(View, {\n    children: [_jsx(Carousel, {\n      layout: \"default\",\n      layoutCardOffset: 9,\n      ref: isCarousel,\n      data: vieweddecks,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(Flashcard, {\n          route: {\n            params: {\n              frontContent: item.frontContent,\n              backContent: item.backContent\n            }\n          }\n        });\n      },\n      sliderWidth: SLIDER_WIDTH,\n      itemWidth: ITEM_WIDTH,\n      onScrollIndexChanged: function onScrollIndexChanged(index) {\n        return setIndex(index);\n      },\n      useScrollView: true\n    }), _jsx(Pagination, {\n      dotsLength: vieweddecks.flashcards.length,\n      activeDotIndex: index,\n      carouselRef: isCarousel,\n      dotStyle: {\n        width: 10,\n        height: 10,\n        borderRadius: 5,\n        marginHorizontal: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.92)'\n      },\n      inactiveDotOpacity: 0.4,\n      inactiveDotScale: 0.6,\n      tappableDots: true\n    })]\n  });\n};\nexport default CarouselCards;","map":{"version":3,"names":["React","View","Carousel","Pagination","Flashcard","jsx","_jsx","jsxs","_jsxs","SLIDER_WIDTH","Dimensions","get","width","ITEM_WIDTH","Math","round","CarouselCards","vieweddecks","_React$useState","useState","_React$useState2","_slicedToArray","index","setIndex","isCarousel","useRef","children","layout","layoutCardOffset","ref","data","renderItem","_ref","item","route","params","frontContent","backContent","sliderWidth","itemWidth","onScrollIndexChanged","useScrollView","dotsLength","flashcards","length","activeDotIndex","carouselRef","dotStyle","height","borderRadius","marginHorizontal","backgroundColor","inactiveDotOpacity","inactiveDotScale","tappableDots"],"sources":["C:/Users/MM/Documents/GitHub/flashcard-grove-card/flashcard-app/carouselCards.js"],"sourcesContent":["import React from 'react'\r\nimport { View } from \"react-native\"\r\nimport Carousel, { Pagination } from 'react-native-snap-carousel'\r\nimport Flashcard from './flashcard.js'\r\n\r\nconst SLIDER_WIDTH = Dimensions.get('window').width + 80\r\nconst ITEM_WIDTH = Math.round(SLIDER_WIDTH * 0.7)\r\n\r\nconst CarouselCards = (vieweddecks) => {\r\n  const [index, setIndex] = React.useState(0)\r\n  const isCarousel = React.useRef(null)\r\n\r\n  return (\r\n    <View>\r\n      <Carousel\r\n        layout=\"default\"\r\n        layoutCardOffset={9}\r\n        ref={isCarousel}\r\n        data={vieweddecks}\r\n        renderItem={({ item }) => (\r\n          <Flashcard route={{ params: { frontContent: item.frontContent, backContent: item.backContent } }} />\r\n        )}\r\n        sliderWidth={SLIDER_WIDTH}\r\n        itemWidth={ITEM_WIDTH}\r\n        onScrollIndexChanged={(index) => setIndex(index)}\r\n        useScrollView={true}\r\n      />\r\n      <Pagination\r\n        dotsLength={vieweddecks.flashcards.length}\r\n        activeDotIndex={index}\r\n        carouselRef={isCarousel}\r\n        dotStyle={{\r\n          width: 10,\r\n          height: 10,\r\n          borderRadius: 5,\r\n          marginHorizontal: 0,\r\n          backgroundColor: 'rgba(0, 0, 0, 0.92)'\r\n        }}\r\n        inactiveDotOpacity={0.4}\r\n        inactiveDotScale={0.6}\r\n        tappableDots={true}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default CarouselCards"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,OAAAC,IAAA;AAEzB,OAAOC,QAAQ,IAAIC,UAAU,QAAQ,4BAA4B;AACjE,OAAOC,SAAS;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtC,IAAMC,YAAY,GAAGC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,GAAG,EAAE;AACxD,IAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,GAAG,GAAG,CAAC;AAEjD,IAAMO,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,WAAW,EAAK;EACrC,IAAAC,eAAA,GAA0BlB,KAAK,CAACmB,QAAQ,CAAC,CAAC,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAApCI,KAAK,GAAAF,gBAAA;IAAEG,QAAQ,GAAAH,gBAAA;EACtB,IAAMI,UAAU,GAAGxB,KAAK,CAACyB,MAAM,CAAC,IAAI,CAAC;EAErC,OACEjB,KAAA,CAACP,IAAI;IAAAyB,QAAA,GACHpB,IAAA,CAACJ,QAAQ;MACPyB,MAAM,EAAC,SAAS;MAChBC,gBAAgB,EAAE,CAAE;MACpBC,GAAG,EAAEL,UAAW;MAChBM,IAAI,EAAEb,WAAY;MAClBc,UAAU,EAAE,SAAAA,WAAAC,IAAA;QAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;QAAA,OACjB3B,IAAA,CAACF,SAAS;UAAC8B,KAAK,EAAE;YAAEC,MAAM,EAAE;cAAEC,YAAY,EAAEH,IAAI,CAACG,YAAY;cAAEC,WAAW,EAAEJ,IAAI,CAACI;YAAY;UAAE;QAAE,CAAE,CAAC;MAAA,CACpG;MACFC,WAAW,EAAE7B,YAAa;MAC1B8B,SAAS,EAAE1B,UAAW;MACtB2B,oBAAoB,EAAE,SAAAA,qBAAClB,KAAK;QAAA,OAAKC,QAAQ,CAACD,KAAK,CAAC;MAAA,CAAC;MACjDmB,aAAa,EAAE;IAAK,CACrB,CAAC,EACFnC,IAAA,CAACH,UAAU;MACTuC,UAAU,EAAEzB,WAAW,CAAC0B,UAAU,CAACC,MAAO;MAC1CC,cAAc,EAAEvB,KAAM;MACtBwB,WAAW,EAAEtB,UAAW;MACxBuB,QAAQ,EAAE;QACRnC,KAAK,EAAE,EAAE;QACToC,MAAM,EAAE,EAAE;QACVC,YAAY,EAAE,CAAC;QACfC,gBAAgB,EAAE,CAAC;QACnBC,eAAe,EAAE;MACnB,CAAE;MACFC,kBAAkB,EAAE,GAAI;MACxBC,gBAAgB,EAAE,GAAI;MACtBC,YAAY,EAAE;IAAK,CACpB,CAAC;EAAA,CACE,CAAC;AAEX,CAAC;AAED,eAAetC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}